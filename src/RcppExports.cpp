// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_fibo
NumericVector cpp_fibo(double s1, double s2, int n);
RcppExport SEXP _yasss_cpp_fibo(SEXP s1SEXP, SEXP s2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fibo(s1, s2, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fibo_df
NumericMatrix cpp_fibo_df(int n, int n_columns);
RcppExport SEXP _yasss_cpp_fibo_df(SEXP nSEXP, SEXP n_columnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_columns(n_columnsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fibo_df(n, n_columns));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fibo_df_pass
NumericMatrix cpp_fibo_df_pass(int n, int n_columns, Function foo);
RcppExport SEXP _yasss_cpp_fibo_df_pass(SEXP nSEXP, SEXP n_columnsSEXP, SEXP fooSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_columns(n_columnsSEXP);
    Rcpp::traits::input_parameter< Function >::type foo(fooSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fibo_df_pass(n, n_columns, foo));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mutator_uniform_fun
List cpp_mutator_uniform_fun(StringVector parent, double mu);
RcppExport SEXP _yasss_cpp_mutator_uniform_fun(SEXP parentSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mutator_uniform_fun(parent, mu));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_yasss_cpp_fibo", (DL_FUNC) &_yasss_cpp_fibo, 3},
    {"_yasss_cpp_fibo_df", (DL_FUNC) &_yasss_cpp_fibo_df, 2},
    {"_yasss_cpp_fibo_df_pass", (DL_FUNC) &_yasss_cpp_fibo_df_pass, 3},
    {"_yasss_cpp_mutator_uniform_fun", (DL_FUNC) &_yasss_cpp_mutator_uniform_fun, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_yasss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
