% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_pop.R
\name{sim_pop}
\alias{sim_pop}
\title{Simulates evolution of DNA of a population}
\usage{
sim_pop(
  ancestors,
  r0 = 2,
  n_gen = NULL,
  n_pop = NULL,
  mutator = list(fun = "mutator_uniform_fun", args = list(mu = 0.01)),
  fitness_evaluator = list(fun = "fitness_evaluator_uniform_fun", args = NULL),
  ps_rate = 0,
  verbose = FALSE
)
}
\arguments{
\item{ancestors}{A list of DNA sequences with which to start the population. Include the same sequence multiple times to achieve a target ratio.}

\item{r0}{The number of offspring each molecule produces. Currently restricted to being an integer, but this will become a more complex construct in future versions (GH issue #17).}

\item{n_gen}{The number of generations to simulate.}

\item{n_pop}{Stop the simulation when the population size exceeds this number.}

\item{mutator}{A list with two elements fun and args specifying the name of the function that mutates parents into their offspring and the list of arguments said function requires.}

\item{fitness_evaluator}{A list with two elements fun and args, specifying the name of the function that evaluates the fitness of each sequence and the list of arguments the function requires.}

\item{ps_rate}{The chance that any given sequence will be a recombinant.}

\item{verbose}{If TRUE, progress is printed to STDOUT.}
}
\value{
A genealogy data structure. TODO: link to general documentation on a genealogy. GH issue #6.
}
\description{
Produce a set of DNA sequences by simulation a population with multiple generations allowing mutation and recombination
}
\details{
Details: Simulated multiple generations TODO - expand this
}
\examples{

# Five generations, ancestor 60 As, mutation rate 10\% per base per generation
x <- sim_pop(ancestors = paste(rep("A", 60), collapse = ''),
             r0 = 2,
             n_gen = 5,
             n_pop = Inf,
             mutator = list(fun = "mutator_uniform_fun",
                            args = list(mu = 0.1)),
             fitness_evaluator = list(fun = "fitness_evaluator_uniform_fun",
                                      args = NULL))
# Prints sequences of current generation
x \%>\% filter(gen_num == max(gen_num)) \%>\% select('the_seq')

# Plots a histogram of the number of mutations between each parent
# and its offspring in the last generation
\dontrun{
ggplot(subset(x, gen_num == max(gen_num)), aes(n_mut)) + 
  geom_histogram(binwidth = 1)
}
}
